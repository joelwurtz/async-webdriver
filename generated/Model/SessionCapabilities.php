<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace AsyncWebDriver\Api\Model;

class SessionCapabilities extends \ArrayObject
{
    /**
     * @var string
     */
    protected $browserName;
    /**
     * @var string
     */
    protected $version;
    /**
     * @var string
     */
    protected $platform;
    /**
     * @var bool
     */
    protected $javascriptEnabled;
    /**
     * @var bool
     */
    protected $takesScreenshot;
    /**
     * @var bool
     */
    protected $handlesAlerts;
    /**
     * @var bool
     */
    protected $databaseEnabled;
    /**
     * @var bool
     */
    protected $locationContextEnabled;
    /**
     * @var bool
     */
    protected $applicationCacheEnabled;
    /**
     * @var bool
     */
    protected $browserConnectionEnabled;
    /**
     * @var bool
     */
    protected $cssSelectorsEnabled;
    /**
     * @var bool
     */
    protected $webStorageEnabled;
    /**
     * @var bool
     */
    protected $rotatable;
    /**
     * @var bool
     */
    protected $acceptSslCerts;
    /**
     * @var bool
     */
    protected $nativeEvents;
    /**
     * @var Proxy
     */
    protected $proxy;

    /**
     * @return string
     */
    public function getBrowserName(): ?string
    {
        return $this->browserName;
    }

    /**
     * @param string $browserName
     *
     * @return self
     */
    public function setBrowserName(?string $browserName): self
    {
        $this->browserName = $browserName;

        return $this;
    }

    /**
     * @return string
     */
    public function getVersion(): ?string
    {
        return $this->version;
    }

    /**
     * @param string $version
     *
     * @return self
     */
    public function setVersion(?string $version): self
    {
        $this->version = $version;

        return $this;
    }

    /**
     * @return string
     */
    public function getPlatform(): ?string
    {
        return $this->platform;
    }

    /**
     * @param string $platform
     *
     * @return self
     */
    public function setPlatform(?string $platform): self
    {
        $this->platform = $platform;

        return $this;
    }

    /**
     * @return bool
     */
    public function getJavascriptEnabled(): ?bool
    {
        return $this->javascriptEnabled;
    }

    /**
     * @param bool $javascriptEnabled
     *
     * @return self
     */
    public function setJavascriptEnabled(?bool $javascriptEnabled): self
    {
        $this->javascriptEnabled = $javascriptEnabled;

        return $this;
    }

    /**
     * @return bool
     */
    public function getTakesScreenshot(): ?bool
    {
        return $this->takesScreenshot;
    }

    /**
     * @param bool $takesScreenshot
     *
     * @return self
     */
    public function setTakesScreenshot(?bool $takesScreenshot): self
    {
        $this->takesScreenshot = $takesScreenshot;

        return $this;
    }

    /**
     * @return bool
     */
    public function getHandlesAlerts(): ?bool
    {
        return $this->handlesAlerts;
    }

    /**
     * @param bool $handlesAlerts
     *
     * @return self
     */
    public function setHandlesAlerts(?bool $handlesAlerts): self
    {
        $this->handlesAlerts = $handlesAlerts;

        return $this;
    }

    /**
     * @return bool
     */
    public function getDatabaseEnabled(): ?bool
    {
        return $this->databaseEnabled;
    }

    /**
     * @param bool $databaseEnabled
     *
     * @return self
     */
    public function setDatabaseEnabled(?bool $databaseEnabled): self
    {
        $this->databaseEnabled = $databaseEnabled;

        return $this;
    }

    /**
     * @return bool
     */
    public function getLocationContextEnabled(): ?bool
    {
        return $this->locationContextEnabled;
    }

    /**
     * @param bool $locationContextEnabled
     *
     * @return self
     */
    public function setLocationContextEnabled(?bool $locationContextEnabled): self
    {
        $this->locationContextEnabled = $locationContextEnabled;

        return $this;
    }

    /**
     * @return bool
     */
    public function getApplicationCacheEnabled(): ?bool
    {
        return $this->applicationCacheEnabled;
    }

    /**
     * @param bool $applicationCacheEnabled
     *
     * @return self
     */
    public function setApplicationCacheEnabled(?bool $applicationCacheEnabled): self
    {
        $this->applicationCacheEnabled = $applicationCacheEnabled;

        return $this;
    }

    /**
     * @return bool
     */
    public function getBrowserConnectionEnabled(): ?bool
    {
        return $this->browserConnectionEnabled;
    }

    /**
     * @param bool $browserConnectionEnabled
     *
     * @return self
     */
    public function setBrowserConnectionEnabled(?bool $browserConnectionEnabled): self
    {
        $this->browserConnectionEnabled = $browserConnectionEnabled;

        return $this;
    }

    /**
     * @return bool
     */
    public function getCssSelectorsEnabled(): ?bool
    {
        return $this->cssSelectorsEnabled;
    }

    /**
     * @param bool $cssSelectorsEnabled
     *
     * @return self
     */
    public function setCssSelectorsEnabled(?bool $cssSelectorsEnabled): self
    {
        $this->cssSelectorsEnabled = $cssSelectorsEnabled;

        return $this;
    }

    /**
     * @return bool
     */
    public function getWebStorageEnabled(): ?bool
    {
        return $this->webStorageEnabled;
    }

    /**
     * @param bool $webStorageEnabled
     *
     * @return self
     */
    public function setWebStorageEnabled(?bool $webStorageEnabled): self
    {
        $this->webStorageEnabled = $webStorageEnabled;

        return $this;
    }

    /**
     * @return bool
     */
    public function getRotatable(): ?bool
    {
        return $this->rotatable;
    }

    /**
     * @param bool $rotatable
     *
     * @return self
     */
    public function setRotatable(?bool $rotatable): self
    {
        $this->rotatable = $rotatable;

        return $this;
    }

    /**
     * @return bool
     */
    public function getAcceptSslCerts(): ?bool
    {
        return $this->acceptSslCerts;
    }

    /**
     * @param bool $acceptSslCerts
     *
     * @return self
     */
    public function setAcceptSslCerts(?bool $acceptSslCerts): self
    {
        $this->acceptSslCerts = $acceptSslCerts;

        return $this;
    }

    /**
     * @return bool
     */
    public function getNativeEvents(): ?bool
    {
        return $this->nativeEvents;
    }

    /**
     * @param bool $nativeEvents
     *
     * @return self
     */
    public function setNativeEvents(?bool $nativeEvents): self
    {
        $this->nativeEvents = $nativeEvents;

        return $this;
    }

    /**
     * @return Proxy
     */
    public function getProxy(): ?Proxy
    {
        return $this->proxy;
    }

    /**
     * @param Proxy $proxy
     *
     * @return self
     */
    public function setProxy(?Proxy $proxy): self
    {
        $this->proxy = $proxy;

        return $this;
    }
}
