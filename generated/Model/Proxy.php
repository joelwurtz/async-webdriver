<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace AsyncWebDriver\Api\Model;

class Proxy
{
    /**
     * @var string
     */
    protected $proxyType;
    /**
     * @var string
     */
    protected $proxyAutoconfigUrl;
    /**
     * @var string
     */
    protected $ftpProxy;
    /**
     * @var string
     */
    protected $httpProxy;
    /**
     * @var string
     */
    protected $sslProxy;
    /**
     * @var string
     */
    protected $socksProxy;
    /**
     * @var string
     */
    protected $socksUsername;
    /**
     * @var string
     */
    protected $socksPassword;
    /**
     * @var string
     */
    protected $noProxy;

    /**
     * @return string
     */
    public function getProxyType(): ?string
    {
        return $this->proxyType;
    }

    /**
     * @param string $proxyType
     *
     * @return self
     */
    public function setProxyType(?string $proxyType): self
    {
        $this->proxyType = $proxyType;

        return $this;
    }

    /**
     * @return string
     */
    public function getProxyAutoconfigUrl(): ?string
    {
        return $this->proxyAutoconfigUrl;
    }

    /**
     * @param string $proxyAutoconfigUrl
     *
     * @return self
     */
    public function setProxyAutoconfigUrl(?string $proxyAutoconfigUrl): self
    {
        $this->proxyAutoconfigUrl = $proxyAutoconfigUrl;

        return $this;
    }

    /**
     * @return string
     */
    public function getFtpProxy(): ?string
    {
        return $this->ftpProxy;
    }

    /**
     * @param string $ftpProxy
     *
     * @return self
     */
    public function setFtpProxy(?string $ftpProxy): self
    {
        $this->ftpProxy = $ftpProxy;

        return $this;
    }

    /**
     * @return string
     */
    public function getHttpProxy(): ?string
    {
        return $this->httpProxy;
    }

    /**
     * @param string $httpProxy
     *
     * @return self
     */
    public function setHttpProxy(?string $httpProxy): self
    {
        $this->httpProxy = $httpProxy;

        return $this;
    }

    /**
     * @return string
     */
    public function getSslProxy(): ?string
    {
        return $this->sslProxy;
    }

    /**
     * @param string $sslProxy
     *
     * @return self
     */
    public function setSslProxy(?string $sslProxy): self
    {
        $this->sslProxy = $sslProxy;

        return $this;
    }

    /**
     * @return string
     */
    public function getSocksProxy(): ?string
    {
        return $this->socksProxy;
    }

    /**
     * @param string $socksProxy
     *
     * @return self
     */
    public function setSocksProxy(?string $socksProxy): self
    {
        $this->socksProxy = $socksProxy;

        return $this;
    }

    /**
     * @return string
     */
    public function getSocksUsername(): ?string
    {
        return $this->socksUsername;
    }

    /**
     * @param string $socksUsername
     *
     * @return self
     */
    public function setSocksUsername(?string $socksUsername): self
    {
        $this->socksUsername = $socksUsername;

        return $this;
    }

    /**
     * @return string
     */
    public function getSocksPassword(): ?string
    {
        return $this->socksPassword;
    }

    /**
     * @param string $socksPassword
     *
     * @return self
     */
    public function setSocksPassword(?string $socksPassword): self
    {
        $this->socksPassword = $socksPassword;

        return $this;
    }

    /**
     * @return string
     */
    public function getNoProxy(): ?string
    {
        return $this->noProxy;
    }

    /**
     * @param string $noProxy
     *
     * @return self
     */
    public function setNoProxy(?string $noProxy): self
    {
        $this->noProxy = $noProxy;

        return $this;
    }
}
